% Secondary project processing
clearvars;
baseFolder = 'D:\secondaryProject\020222\AgarLayeredPhantom';
%
folders = rdir([baseFolder,filesep,'Dynamic\*\**\*Param*']);
%
% [lowerBound] = selectLowerBound(folders)
lowerBound = 1395
filterFlag = 0;

% Process dynamic data
workingIndices = [10:75]
for folderIndex = 1:length(folders)
      [IQData,VMIQ,vec_phase_diff,Parameters] = loadDynamicData(folders,folderIndex,lowerBound);
    
      %% Display and save the displacement movie.
    [Nz,Nx,Nt]= size(vec_phase_diff);         % The dimensions of data in the z axis, the x axis and time.
    zaxis = linspace(0,(Nz-1)*Parameters.delta_z,Nz)*1e3;                      %(mm) Aixial axis.
    xaxis = linspace(-(Nx-1)/2*Parameters.delta_x,(Nx-1)/2*Parameters.delta_x,Nx)*1e3;    %(mm) Lateral axis.
    taxis = linspace(0,(Nt-1)*Parameters.delta_t,Nt);
  
    dispLeft = zeros([size(vec_phase_diff,1) size(vec_phase_diff,2) workingIndices(end)-workingIndices(1)+1]);
    dispRight = dispLeft;
        for imageDepth = 1:size(vec_phase_diff,1)
            TEST = squeeze(vec_phase_diff(imageDepth,:,workingIndices));
            Y = fft2(TEST);
            %         FFTFILTERBOT = imresize(FILT,[size(Y,1) size(Y,2)])
            %         FFTFILTERBOT(FFTFILTERBOT<0.1) = 0;
            %         FFTFILTERBOT(:,round(size(FFTFILTERBOT,2)/2):end) = 0;
            FFTFILTERBOT = ones([size(Y,1) size(Y,2)]);
            FFTFILTERBOT(1:round(size(FFTFILTERBOT,1)/2),1:round(size(FFTFILTERBOT,2)/2)) = 0;
            FFTFILTERBOT(round(size(FFTFILTERBOT,1)/2)+1:end,round(size(FFTFILTERBOT,2)/2)+1:end) = 0;
            FFTFILTERTOP = fliplr(FFTFILTERBOT);
            NEWTOP = FFTFILTERTOP .* Y;
            NEWBOT = FFTFILTERBOT .* Y;
            newtopifft = ifft2(ifftshift(NEWTOP));
            newbotifft = ifft2(ifftshift(NEWBOT));
            dispLeft(imageDepth,:,:) = abs(newtopifft);
            dispRight(imageDepth,:,:) = abs(newbotifft);
            disp([num2str(imageDepth),'/',num2str(size(vec_phase_diff,1))])
        end
        
% figure; 
% for k = 1:size(dispLeft,3)
%     imagesc(dispLeft(:,:,k));
%     caxis([0 0.1])
%     colormap(jet)
%     pause(0.2)
% end
% 
% figure; 
% for k = 1:size(dispRight,3)
%     imagesc(dispRight(:,:,k));
%     caxis([0 0.1])
%     colormap(jet)
%     pause(0.2)
% end

% Left side analysis
        
%     figure;
%     for k = 10:size(vec_phase_diff,3)
%         imagesc(vec_phase_diff(:,:,k))
%         colormap(fireice)
%         title(num2str(k))
%         pause(0.2)
%     end
%     figure; imagesc(corrCoeff>0.7)
newWorkingIndices = 1:workingIndices(end)-workingIndices(1)+1


    
    %% Function: Extract a shear wave elasticity map from 3D displacement data.
        % Notes:(1) The displacement is axial displacement generated by acoustic
        %           radiation force.
        %       (2) The displacement is in the format of space-space-time format,
        %           more specifically axial-lateral-time format.
        % Methods: This codes is dedicated to 'local TOF method'.
        
        % Author:   Jingfei Liu (GT ECE&BME)
        % Date:     February 06, 2019
        % Update:   2019-07-01.
        
        
        % clear; close all;
        % clear;
        
        %% Data loading.
        % load backward; % [ADJUSTABLE]
        disp_z = dispLeft(:,:,newWorkingIndices);  % The first frame is normally very noisy.
        M = Parameters.M; N = Parameters.N;
        % Basic parameters.
        density = 1000;                   %(kg/m^3) Mass density of the medium.       [ADJUSTABLE]
        [Nz,Nx,Nt]= size(disp_z);         % The dimensions of data in the z axis, the x axis and time.
        zaxis = linspace((M/2)*Parameters.delta_z,(Nz-M/2)*Parameters.delta_z,Nz)*1e3;        % (mm) Aixial axis.
        xaxis = linspace(-(Nx-1)/2*Parameters.delta_x,(Nx-1)/2*Parameters.delta_x,Nx)*1e3;    % (mm) Lateral axis.
        taxis = linspace(0,(Nt-1)*Parameters.delta_t,Nt);                          % (s) Time axis.
        
     
        disp_z_smooth_desamp = disp_z;
        zaxis_desamp = zaxis;
      
        % 1.3: Data interpolation in time domain.
        % Motivation: The 2018-07-04 signal processing project shows that temporal
        %             interpolation can eliminate stairs of the TOF profiles.
        N_interp = 5;       % Ratio of interpolation. [ADJUSTABLE]
        taxis_interp = linspace(min(taxis),max(taxis),Nt*N_interp);
        delta_t_interp = min(diff(taxis_interp));
        tic();
        disp_z_smooth_desamp_interp = zeros([size(disp_z_smooth_desamp,1) size(disp_z_smooth_desamp,2) N_interp*size(disp_z_smooth_desamp,3)]);
        % for ii = 1:Nz_desamp
%         clearvars disp_z_smooth_desamp_interp
        for ii = 1:size(disp_z_smooth_desamp,1)
            signal = squeeze(disp_z_smooth_desamp(ii,:,:));
            signal_interp = interp1(taxis,signal',taxis_interp,'spline');
            disp_z_smooth_desamp_interp(ii,:,:) = signal_interp';
        end
        toc();
    
    
    for sideIndex = 1% :2
        loopExit=0
%          roi(2) = 290
            roi(4) = 50;
        while loopExit == 0
            if sideIndex == 1
%                 figure; imagesc(abs(newDispLEFT(:,:,10)))
playWaveVideo(abs(disp_z_smooth_desamp_interp(:,:,workingIndices)),0.005)
                % figure; h = imagesc(abs(clippedBScan(:,:,1))); alpha = abs(newDispLEFT(:,:,10)); set(h,'alphaData',alpha*0.9); colormap(jet)
                [~,depth] = ginput(1);
                roi(2) = round(depth);
                close all force;
                disp2 = abs(disp_z_smooth_desamp_interp);
                roi(1) = 1
                roi(3) = round(size(disp_z_smooth_desamp_interp,2)/2);
                
            else
                figure; imagesc(abs(newDispRIGHT(:,:,10)))
                % figure; h = imagesc(abs(clippedBScan(:,:,1))); alpha = abs(newDispRIGHT(:,:,10)); set(h,'alphaData',alpha*0.9); colormap(jet)
                [~,depth] = ginput(1);
                roi(2) = round(depth);
                disp2 = abs(newDispRIGHT);
                roi(1) = round(size(disp2,2)/2)+1;
                roi(3) = round(size(disp2,2)/2)-1
                
            end
            xRegion = round(roi(1)):round(roi(1)+roi(3))-1;
            yRegion = round(roi(2)):round(roi(2)+roi(4));
            % yRegion = 380-15:380+15;
            
            windowXAxis = xaxis(xRegion)
            % ROI Scaling
            xScale = xaxis(2)-xaxis(1) % mm
            zScale = zaxis(2)-zaxis(1) % mm
            roiScaledZ = roi(2)*zScale
            %     roiScaledX = roi(1)*xScale
            roiScaledX = xaxis(round(roi(1))) % Because 0 is in middle of scale
            roiXDistance = roi(3)*xScale;
            roiZDistance = roi(4)*zScale;
            roiScaled = [roiScaledX roiScaledZ roiXDistance roiZDistance]
            
            
            clearvars spacetime
            % Step 2: Get waves in that region and convert to displacement/time map
            for k = 1:size(disp2,3)
                spacetime(:,k) = mean(squeeze(disp2(yRegion,xRegion,k)));
            end
            if roiScaled(1) <0
                spacetime = flipud(spacetime)
            end
            
            figure; imagesc(spacetime)
            % if sideIndex == 1
            spacetime = flip(spacetime,1);
            
            Spacetime = medfilt2(spacetime,[2 2],'Symmetric');
            Spacetime = Spacetime;
            figure;
            himage= imagesc(Spacetime)
            h = impoly(gca);
            PosTime = wait(h);
            pos = getPosition(h);
            title('Select time region to be calculated');
            BW = createMask(h,himage);
            
            Line_t = sum(BW,2);
            idx_t1 = find(Line_t==0);
            Jump = find(diff(idx_t1)>2);
            t_ini = idx_t1(Jump(1));
            t_end = idx_t1(Jump(1)+1);
            
            
            Spacetime_Mask = Spacetime.*BW;
            count = 1
            clearvars Tdata Xdata
            for i = 1:size(Spacetime_Mask,2)
                [val,idx] = max(Spacetime_Mask(:,i));
                if val~=0 & (isnan(val)==0) & (isempty(idx)==0)
                    Tdata(count) = i;
                    Xdata(count) = idx;
                    count = count+1;
                end
            end
            
            
            waveLocation = Xdata(5:end-4);
            timeLocation = Tdata(5:end-4);
            figure; imagesc(Spacetime_Mask); hold on; plot(Tdata(5:end-4),Xdata(5:end-4),'r*'); hold off;
            
            waveLocationExistingValues = waveLocation(~isnan(waveLocation))
            velocityFit = fit(taxis_interp(timeLocation)',-1*xaxis(waveLocationExistingValues)','poly1');
                Velocity(:,folderIndex) = abs(velocityFit.p1/1000)
          
            
            
            [xData,yData] = prepareCurveData([],waveLocationExistingValues)
            lengthXData = length(xData)
            waveLocationExistingValues(waveLocationExistingValues>length(windowXAxis)) = []
            yData = windowXAxis(waveLocationExistingValues)
            for k = lengthXData+1:length(waveLocation)
                xData(k) = NaN;
                yData(k) = NaN;
            end
            plot(taxis_interp(1:length(yData)),yData)
            close all force;

            velocityFit = fit(taxis_interp(timeLocation)',...
                windowXAxis(waveLocationExistingValues)','poly1');

           

  figure;

                    imagesc(taxis_interp,xaxis(xRegion),spacetime)
                    hold on;
                    plot(taxis_interp(timeLocation),yData,'r*')
                    plot(velocityFit,yData,taxis_interp(timeLocation))
                    hold off;
              ylabel('Distance (mm)')
              xlabel('Time (s)')
                title(['Velocity: ',num2str(Velocity(:,folderIndex)),' m/s'])
                export_fig([folders(folderIndex).folder,filesep,'DistanceVsTimeFitting.png'])

            figure;
            uitable('Data',Velocity')
            folders(folderIndex).folder
            answer = questdlg('Good?')
            switch answer
                case 'Yes'
                    loopExit = 1;
                case 'No'
                case 'cancel'
                    break
            end
        end
    end
    
end

figure; 
scatter(1:length(Velocity),Velocity);
title('Velocity vs compression number')
xlabel('Compression number')
ylabel('Velocity')
xlim([0 10.5])
ylim([3.2 3.5])

clearvars -except baseFolder lowerBound Parameters
folders = rdir([baseFolder,filesep,'Static\*\**\*Param*']);
[IQData,VMIQ,vec_phase_diff] = loadStaticData(folders,lowerBound,length(folders));
folderIndex = 1;
save([baseFolder,filesep,'combinedIQData.mat'],'IQData');
 [~,~,~,Parameters] = loadDynamicData(folders,folderIndex,lowerBound);
 
 images = mat2gray(abs(IQData));

% volumeSegmenter
% save([baseFolder,filesep,'labels.mat'],'labels');
load([baseFolder,filesep,'labels.mat'])
for k = 1:size(labels,3)
    label = labels(:,:,k);
    top = zeros([size(label,1) size(label,2)]);
    top(label== 'Label1') = 1;
    bottom = zeros([size(label,1) size(label,2)]);
    bottom(label== 'Label2') = 2;
    topStack(:,:,k) = logical(top);
    bottomStack(:,:,k) = logical(bottom);
end

% Top thickness change

for l = 1:10
for k = 1:size(IQData,2)
    try
    topIndices(:,k,l) = find(topStack(:,k,l)==1,1,'first');
    bottomIndices(:,k,l) = find(topStack(:,k,l)==1,1,'last');
    catch
        topIndices(:,k,l) = NaN;
        bottomIndices(:,k,l) = NaN;
    end
end
end

for k = 1:10
   topMean = round(mean(topIndices(:,:,k),'omitnan'));
      botMean = round(mean(bottomIndices(:,:,k),'omitnan'));
    thickness(:,k) = (botMean-topMean)*Parameters.delta_z
end

for l = 1:10
for k = 1:size(IQData,2)
    try
    topIndices(:,k,l) = find(topStack(:,k,l)==1,1,'first');
    bottomIndices(:,k,l) = find(topStack(:,k,l)==1,1,'last');
    catch
        topIndices(:,k,l) = NaN;
        bottomIndices(:,k,l) = NaN;
    end
end
end

for k = 1:10
   topMean = round(topIndices(:,:,k))
      botMean = round(bottomIndices(:,:,k))
    thicknessNotAvg(:,:,k) = (botMean-topMean)*Parameters.delta_z
end

figure;
for k = 1:size(topIndices,3)

plot(topIndices(:,:,k)-bottomIndices(:,:,k)); hold on;
end
hold off;

figure;
scatter(1:10,squeeze(thicknessNotAvg(:,148,:)*1000))
title('Change in thickness for top layer')
xlabel('Compression number')
ylabel('Thickness (mm)')
xlim([0 10.5])
ylim([7.35 7.75])

topDiffCS = squeeze(cumsum(diff(thicknessNotAvg(:,148,:)*1000)))
topStrain = abs(topDiffCS)./(thicknessNotAvg(:,148,1)*1000)*100;
figure; plot(topStrain)
title('Strain top layer')
xlabel('Compression #')
ylabel('Strain %')
% Bottom thickness change


for l = 1:10
for k = 1:size(IQData,2)
    try
    topIndices(:,k,l) = find(bottomStack(:,k,l)==1,1,'first');
    bottomIndices(:,k,l) = find(bottomStack(:,k,l)==1,1,'last');
    catch
        topIndices(:,k,l) = NaN;
        bottomIndices(:,k,l) = NaN;
    end
end
end

for k = 1:10
   topMean = round(mean(topIndices(:,:,k),'omitnan'));
      botMean = round(mean(bottomIndices(:,:,k),'omitnan'));
    thickness(:,k) = (botMean-topMean)*Parameters.delta_z
end

for l = 1:10
for k = 1:size(IQData,2)
    try
    topIndices(:,k,l) = find(bottomStack(:,k,l)==1,1,'first');
    bottomIndices(:,k,l) = find(bottomStack(:,k,l)==1,1,'last');
    catch
        topIndices(:,k,l) = NaN;
        bottomIndices(:,k,l) = NaN;
    end
end
end

for k = 1:10
   topMean = round(topIndices(:,:,k))
      botMean = round(bottomIndices(:,:,k))
    thicknessNotAvg(:,:,k) = (botMean-topMean)*Parameters.delta_z
end

figure;
scatter(1:10,squeeze(thicknessNotAvg(:,148,:)*1000))
title('Change in thickness for bottom layer')
xlabel('Compression number')
ylabel('Thickness (mm)')
% xlim([0 10.5])
% ylim([17.8 18.02])


botDiffCS = squeeze(cumsum(diff(thicknessNotAvg(:,148,:)*1000)))
botStrain = abs(botDiffCS)./(thicknessNotAvg(:,148,1)*1000)*100;
figure; plot(botStrain)
title('Strain bot layer')
xlabel('Compression #')
ylabel('Strain (%)')

for k = 1:size(topIndices,3)
figure(1);
plot(topIndices(:,:,k)); hold on;
end
hold off;

for k = 1:size(topIndices,3)
figure(1);
plot(bottomIndices(:,:,k)); hold on;
end
hold off;

figure;
for k = 1:size(topIndices,3)

plot(topIndices(:,:,k)-bottomIndices(:,:,k)); hold on;
end
hold off;

figure;
plot(topStrain); hold on; plot(botStrain); hold off;


figure; plot(topStrain./botStrain)
title('Strain ratio top:bottom')
xlabel('Compression #')
ylabel('Ratio')

